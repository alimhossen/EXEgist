==EXEgist
Version: So Alpha It Hurts.

ITP Midterm project for Designing Conversation Spaces at ITP, 2011.

Build is in Ruby, Sinatra, DataMapper, SQLite3

EXEgist is an experimental conversation spaces that provides the user with the ability to inline comment on any sentence in the article.  

ADD COMMENT - Click on any sentence and you can read all the comments within it.
If you have the add comment and click on the sentence, you'll be able to add a comment to it.  

There are additional features on the sidebar

COMMENT LENGTH - In the hopes of encouraging longer comments, we have an optional button that is auto-set to hide comments that are under 25 words.

COMMENT DEPTH - The ability to see just see no comments, the first layer, or all the layers.  Ultimately the goal is to have the comment depth be controlled entirely by the user. 

CONTRIBUTORS - The ability to single out the contributions from a specific contributor to either see just their comments or mute their comments.

________

==Ruby / Sinatra Issues

- DB: RESOLVED.  From what we can tell, we were able to do a production version in Postgres on Heroku with no issue so far.  

- DB MAPPING: (CURRENTLY WORKING ON) We are going to rewrite the TestComment DB to connect to Parent types and Parent id's and offer up comment or post via polymorphism.  This will need to coincide with a rewrite of the comment.erb to include the type and id and a rewrite of how comments are inserted in paper.erb
INCL: 
POST COMMENTS
INSERTING FIRST ORDER COMMENTS
INSERTING NTH ORDER COMMENTS

- COMMENTS ON COMMENTS: The ultimate goal of this conversation space is to have comments on comments.  Only yesterday did we get the comments to appear in their designated paper.  
	
________

==jQuery Issues

- PAPER/ARTICLE SUBMISSION: We are currently able to post papers/articles.  But it's stripping any formatting from the article that was posted.

- COMMENT POSTS: Needs to be rewritten with the new db structure. 

- CONTRIBUTORS SOLO: (Solo / Mute) The goal is when you click on the contributor solo button, it shows only the contributions from that user.  This is currently broken.  Example is on wallace.erb.  Preferably, when comments are added to a page, they have a class of the username.  The 'ul li' of that contributor has name as it's 'id'.  If the id == class, then show those comments, hide all others.  That's our current logic, but my guess: there is a better way.  There is an ability to 'solo' multiple contributors at once.  The mute button is the opposite effect, to hide the user, but it hasn't been touched yet.  

- CONTRIBUTORS MUTE: Similar to solo(above) only it hides all the comments from that contributor.

- CONTRIBUTORS HIGHLIGHT: When you you are in Read Comments mode, it.

_______

==Minor Issues

- COMMENT LENGTH: when you click on Comment Length, it will close anyhting under 25 comments.  However, when you click it again, it will open all the comments under 25.  This should simply reopen all the comments that were previously closed.  That's tricky and not necessary for the  demo.

_______

==Next Steps

- Fix Current Issues

- COMMENT ON COMMENTS

- CHANGE READ/POST STRUCTURE: This would remove the button on the left that switches from read comments to add post.  Instead, when you clicked on a sentence, it would open up the comments below it.  On the right side of the sentence, there would be a button that would open up a Post Comment form.

Given what we are trying to accomplish here, what would have been the best way to approach this concept?

What are some common patterns that you would use given our intended framework?

Do you know of any educational resources that we could have used in general for using Sinatra or perhaps Rails?

I did the Pine.fm Learn to Program, Peepcode tutorial and we have a student-run Web Development Group every Tuesday.  

is a critical explanation or interpretation of a text, especially a religious text.

