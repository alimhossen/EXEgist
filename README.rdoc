==EXEgist
Version: So Alpha It Hurts.

ITP Midterm project for Designing Conversation Spaces at ITP, 2011.

Build is in Ruby, Sinatra, DataMapper, SQLite3

EXEgist is an experimental conversation spaces that provides the user with the ability to inline comment on any sentence in the article.  

ADD COMMENT - Click on any sentence and you can read all the comments within it.
If you have the add comment and click on the sentence, you'll be able to add a comment to it.  

There are additional features on the sidebar

COMMENT LENGTH - In the hopes of encouraging longer comments, we have an optional button that is auto-set to hide comments that are under 25 words.

COMMENT DEPTH - The ability to see just see no comments, the first layer, or all the layers.  Ultimately the goal is to have the comment depth be controlled entirely by the user. 

CONTRIBUTORS - The ability to single out the contributions from a specific contributor to either see just their comments or mute their comments.

________

==Ruby / Sinatra Issues

- DB: For our initial testing here, we are using SQLite3, but we will need to switch over to MySQL for the test with other humans.  My computer went on the fritz when I tried to use MySQL, so I jumped back to SQLite3.  

- DB MAPPING: Our current db construction is really poor.  We should have has n and belongs_to in several places:

	TestComment
	belongs_to, :paper
	belongs_to, :user
	
	Paper
	has n, :comments

	Users
	has n, :comments
	
when we tried to implement this, the whole thing blew up.  

- COMMENTS ON COMMENTS: The ultimate goal of this conversation space is to have comments on comments.  Only yesterday did we get the comments to appear in their designated paper.  Current Thinking:  add a comment_id to the TestComment model and in paper.erb, when you go through and add the comments, when a comment

TestComment
body
name
char_position
text_id
Parent_id

First Order Comment
Text_id: 1
Parent_id: null
Char_pos: 47

Second Order Comment
P_ID: 1
Char_Pos
Text_id: Null
	
________

==jQuery Issues

- PAPER/ARTICLE SUBMISSION: We are currently able to post papers/articles.  But it's stripping any formatting from the article that was posted.

- COMMENT POSTS: The comments are going into the database! 

- CONTRIBUTORS: (Solo / Mute) The goal is when you click on the contributor solo button, it shows only the contributions from that user.  This is currently opening every comment, not just the comments from the selected user.  Example is on wallace.erb.  The mute button is the opposite effect, to hide the user, but it hasn't been touched yet.  Ultimately, it would save your preferences as well. (Highlight) When the user scrolls over a comment from a user, their username lights up.

_______

==Minor Issues

- COMMENT LENGTH: when you click on Comment Length, it will close anyhting under 25 comments.  However, when you click it again, it will open all the comments under 25.  This should simply reopen all the comments that were previously closed.  That's tricky and not necessary for the  demo.

_______

==Next Steps

- Fix Current Issues

- COMMENT ON COMMENTS

- 

Given what we are trying to accomplish here, what would have been the best way to approach this concept?

What are some common patterns that you would use given our intended framework?

Do you know of any educational resources that we could have used in general for using Sinatra or perhaps Rails?

I did the Pine.fm Learn to Program, Peepcode tutorial and we have a student-run Web Development Group every Tuesday.  

is a critical explanation or interpretation of a text, especially a religious text.

